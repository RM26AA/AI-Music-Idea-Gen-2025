import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, Music, Download, Copy, CheckCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { generateMusicIdea } from "@/lib/gemini";

interface MusicForm {
  genre: string;
  mood: string;
  tempo: string;
  instrumentation: string;
  inspiration: string;
}

interface MusicIdea {
  songIdea: string;
  chordProgression: string;
  melody: string;
  structure: string;
  lyrics: string;
  production: string;
}

export const MusicGenerator = () => {
  const [form, setForm] = useState<MusicForm>({
    genre: "",
    mood: "",
    tempo: "",
    instrumentation: "",
    inspiration: "",
  });
  const [result, setResult] = useState<MusicIdea | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const genres = ["Rock", "Hip Hop", "Lo-fi", "EDM", "Classical", "Jazz", "Pop", "Folk", "R&B", "Indie"];
  const moods = ["Happy", "Sad", "Dark", "Dreamy", "Cinematic", "Energetic", "Chill", "Mysterious", "Romantic"];
  const tempos = ["Slow (60-80 BPM)", "Medium (80-120 BPM)", "Fast (120-140 BPM)", "Very Fast (140+ BPM)"];
  const instruments = ["Guitar", "Piano", "Synths", "Strings", "Drums", "Bass", "Vocals", "Brass", "Electronic"];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!form.genre || !form.mood || !form.tempo) {
      toast({
        title: "Missing Information",
        description: "Please fill in at least Genre, Mood, and Tempo",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const idea = await generateMusicIdea(form);
      setResult(idea);
      toast({
        title: "Music Idea Generated!",
        description: "Your creative music idea is ready",
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate music idea. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async () => {
    if (!result) return;
    
    const text = `üéµ MUSIC IDEA üéµ

üéº Song Idea:
${result.songIdea}

üéπ Chord Progression:
${result.chordProgression}

üé∂ Melody Idea:
${result.melody}

üèóÔ∏è Structure:
${result.structure}

üé§ Lyrics Snippet:
${result.lyrics}

üéõÔ∏è Production Notes:
${result.production}

Generated by Music Idea Generator`;

    await navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
    toast({
      title: "Copied!",
      description: "Music idea copied to clipboard",
    });
  };

  const downloadAsFile = () => {
    if (!result) return;
    
    const text = `üéµ MUSIC IDEA üéµ

üéº Song Idea:
${result.songIdea}

üéπ Chord Progression:
${result.chordProgression}

üé∂ Melody Idea:
${result.melody}

üèóÔ∏è Structure:
${result.structure}

üé§ Lyrics Snippet:
${result.lyrics}

üéõÔ∏è Production Notes:
${result.production}

Generated by Music Idea Generator`;

    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `music-idea-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Downloaded!",
      description: "Music idea saved as text file",
    });
  };

  return (
    <div className="space-y-8">
      {/* Input Form */}
      <Card className="p-8 shadow-elegant border-0 bg-card/50 backdrop-blur-sm">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-semibold text-foreground mb-2">Create Your Music Idea</h2>
            <p className="text-muted-foreground">Fill in the details to generate your unique musical concept</p>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            {/* Genre */}
            <div className="space-y-2">
              <Label htmlFor="genre" className="text-sm font-medium">Genre *</Label>
              <Select value={form.genre} onValueChange={(value) => setForm({ ...form, genre: value })}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select genre" />
                </SelectTrigger>
                <SelectContent>
                  {genres.map((genre) => (
                    <SelectItem key={genre} value={genre.toLowerCase()}>{genre}</SelectItem>
                  ))}
                  <SelectItem value="custom">Other (specify below)</SelectItem>
                </SelectContent>
              </Select>
              {form.genre === "custom" && (
                <Input
                  placeholder="Enter custom genre"
                  className="bg-background border-border"
                  onChange={(e) => setForm({ ...form, genre: e.target.value })}
                />
              )}
            </div>

            {/* Mood */}
            <div className="space-y-2">
              <Label htmlFor="mood" className="text-sm font-medium">Mood / Theme *</Label>
              <Select value={form.mood} onValueChange={(value) => setForm({ ...form, mood: value })}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select mood" />
                </SelectTrigger>
                <SelectContent>
                  {moods.map((mood) => (
                    <SelectItem key={mood} value={mood.toLowerCase()}>{mood}</SelectItem>
                  ))}
                  <SelectItem value="custom">Other (specify below)</SelectItem>
                </SelectContent>
              </Select>
              {form.mood === "custom" && (
                <Input
                  placeholder="Enter custom mood"
                  className="bg-background border-border"
                  onChange={(e) => setForm({ ...form, mood: e.target.value })}
                />
              )}
            </div>

            {/* Tempo */}
            <div className="space-y-2">
              <Label htmlFor="tempo" className="text-sm font-medium">Tempo *</Label>
              <Select value={form.tempo} onValueChange={(value) => setForm({ ...form, tempo: value })}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select tempo" />
                </SelectTrigger>
                <SelectContent>
                  {tempos.map((tempo) => (
                    <SelectItem key={tempo} value={tempo.toLowerCase()}>{tempo}</SelectItem>
                  ))}
                  <SelectItem value="custom">Other (specify below)</SelectItem>
                </SelectContent>
              </Select>
              {form.tempo === "custom" && (
                <Input
                  placeholder="Enter custom tempo (e.g., 128 BPM)"
                  className="bg-background border-border"
                  onChange={(e) => setForm({ ...form, tempo: e.target.value })}
                />
              )}
            </div>

            {/* Instrumentation */}
            <div className="space-y-2">
              <Label htmlFor="instrumentation" className="text-sm font-medium">Instrumentation</Label>
              <Select value={form.instrumentation} onValueChange={(value) => setForm({ ...form, instrumentation: value })}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select instruments" />
                </SelectTrigger>
                <SelectContent>
                  {instruments.map((instrument) => (
                    <SelectItem key={instrument} value={instrument.toLowerCase()}>{instrument}</SelectItem>
                  ))}
                  <SelectItem value="custom">Other (specify below)</SelectItem>
                </SelectContent>
              </Select>
              {form.instrumentation === "custom" && (
                <Input
                  placeholder="Enter custom instrumentation"
                  className="bg-background border-border"
                  onChange={(e) => setForm({ ...form, instrumentation: e.target.value })}
                />
              )}
            </div>
          </div>

          {/* Extra Inspiration */}
          <div className="space-y-2">
            <Label htmlFor="inspiration" className="text-sm font-medium">Extra Inspiration</Label>
            <Textarea
              placeholder="Keywords like 'space', 'rainy day', 'nostalgia', or any specific ideas..."
              value={form.inspiration}
              onChange={(e) => setForm({ ...form, inspiration: e.target.value })}
              className="bg-background border-border min-h-[80px] resize-none"
            />
          </div>

          <Button 
            type="submit" 
            className="w-full bg-gradient-primary hover:opacity-90 text-white font-medium py-6 text-lg shadow-purple"
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                Generating Music Idea...
              </>
            ) : (
              <>
                <Music className="mr-2 h-5 w-5" />
                Generate Music Idea
              </>
            )}
          </Button>
        </form>
      </Card>

      {/* Results */}
      {result && (
        <Card className="p-8 shadow-elegant border-0 bg-card/50 backdrop-blur-sm">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-semibold text-foreground">Your Music Idea</h2>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={copyToClipboard}
                className="border-primary/20 hover:bg-primary/10"
              >
                {copied ? (
                  <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
                ) : (
                  <Copy className="h-4 w-4 mr-2" />
                )}
                {copied ? "Copied!" : "Copy"}
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={downloadAsFile}
                className="border-primary/20 hover:bg-primary/10"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </div>

          <div className="space-y-6">
            <div className="p-4 bg-secondary/50 rounded-lg">
              <h3 className="font-semibold text-primary mb-2">üéº Song Idea</h3>
              <p className="text-foreground leading-relaxed">{result.songIdea}</p>
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div className="p-4 bg-secondary/50 rounded-lg">
                <h3 className="font-semibold text-primary mb-2">üéπ Chord Progression</h3>
                <p className="text-foreground font-mono">{result.chordProgression}</p>
              </div>

              <div className="p-4 bg-secondary/50 rounded-lg">
                <h3 className="font-semibold text-primary mb-2">üèóÔ∏è Structure</h3>
                <p className="text-foreground">{result.structure}</p>
              </div>
            </div>

            <div className="p-4 bg-secondary/50 rounded-lg">
              <h3 className="font-semibold text-primary mb-2">üé∂ Melody Idea</h3>
              <p className="text-foreground leading-relaxed">{result.melody}</p>
            </div>

            <div className="p-4 bg-secondary/50 rounded-lg">
              <h3 className="font-semibold text-primary mb-2">üé§ Lyrics Snippet</h3>
              <p className="text-foreground italic leading-relaxed">{result.lyrics}</p>
            </div>

            <div className="p-4 bg-secondary/50 rounded-lg">
              <h3 className="font-semibold text-primary mb-2">üéõÔ∏è Production Notes</h3>
              <p className="text-foreground leading-relaxed">{result.production}</p>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};